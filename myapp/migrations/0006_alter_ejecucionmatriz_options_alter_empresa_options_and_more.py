# Generated by Django 4.2.11 on 2025-04-30 02:04

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion

# --- FUNCIONES AUXILIARES PARA RunPython ---
def alter_tiempo_validacion_to_int(apps, schema_editor):
    """
    Convierte tiempo_validacion de interval a integer (días)
    SOLO si la base de datos es PostgreSQL.
    """
    if schema_editor.connection.vendor == 'postgresql':
        # SQL para RequisitoLegal
        schema_editor.execute(
            'ALTER TABLE "myapp_requisitolegal" ALTER COLUMN "tiempo_validacion" TYPE integer USING EXTRACT(DAY FROM "tiempo_validacion");'
        )
        # SQL para RequisitoPorEmpresaDetalle
        schema_editor.execute(
            'ALTER TABLE "myapp_requisitoporempresadetalle" ALTER COLUMN "tiempo_validacion" TYPE integer USING EXTRACT(DAY FROM "tiempo_validacion");'
        )
    # Si no es PostgreSQL (ej. SQLite durante el build), no hace nada con SQL crudo.
    # Django aún intentará cambiar el tipo de campo en su estado interno,
    # pero el SQL específico no se ejecutará en la DB incorrecta.

def reverse_alter_tiempo_validacion_to_interval(apps, schema_editor):
    """
    Intenta revertir tiempo_validacion de integer a interval
    SOLO si la base de datos es PostgreSQL.
    """
    if schema_editor.connection.vendor == 'postgresql':
        # SQL para RequisitoLegal
        schema_editor.execute(
            'ALTER TABLE "myapp_requisitolegal" ALTER COLUMN "tiempo_validacion" TYPE interval USING CAST("tiempo_validacion" || \' days\' AS interval);'
        )
        # SQL para RequisitoPorEmpresaDetalle
        schema_editor.execute(
            'ALTER TABLE "myapp_requisitoporempresadetalle" ALTER COLUMN "tiempo_validacion" TYPE interval USING CAST("tiempo_validacion" || \' days\' AS interval);'
        )
    # Si no es PostgreSQL, no hace nada.

# --- FIN FUNCIONES AUXILIARES ---


class Migration(migrations.Migration):
    dependencies = [
        ("myapp", "0005_requisitolegal_periodicidad_and_more"),
    ]

    operations = [
        # --- AlterModelOptions (Sin Cambios) ---
        migrations.AlterModelOptions(name="ejecucionmatriz", options={...}),
        migrations.AlterModelOptions(name="empresa", options={...}),
        # ... (resto de AlterModelOptions) ...
        migrations.AlterModelOptions(name="sede", options={...}),
        # --- Fin AlterModelOptions ---

        # --- AlterField (Sin Cambios, excepto tiempo_validacion) ---
        migrations.AlterField(model_name="ejecucionmatriz", name="ejecucion", field=...),
        migrations.AlterField(model_name="ejecucionmatriz", name="razon_no_conforme", field=...),
        migrations.AlterField(model_name="empresa", name="logo", field=...),
        migrations.AlterField(model_name="pais", name="codigo", field=...),
        migrations.AlterField(model_name="plan", name="descripcion_periodicidad", field=...),
        migrations.AlterField(model_name="plan", name="year", field=...),
        migrations.AlterField(model_name="requisitolegal", name="industria", field=...),
        migrations.AlterField(model_name="requisitolegal", name="pais", field=...),
        # --- Fin AlterField (excepto tiempo_validacion) ---

        # --- REEMPLAZO DE RunSQL por RunPython ---
        # Quitamos los RunSQL anteriores
        # migrations.RunSQL(...)
        # migrations.RunSQL(...)
        # Añadimos la operación RunPython que llama a nuestras funciones auxiliares
        migrations.RunPython(alter_tiempo_validacion_to_int, reverse_code=reverse_alter_tiempo_validacion_to_interval),
        # --- FIN REEMPLAZO ---

        # --- AlterField (Sin Cambios, excepto tiempo_validacion) ---
        migrations.AlterField(model_name="requisitoporempresadetalle", name="fecha_final", field=...),
        migrations.AlterField(model_name="requisitoporempresadetalle", name="matriz", field=...),
        # --- Fin AlterField (excepto tiempo_validacion) ---

        # --- AddIndex (Sin Cambios) ---
        migrations.AddIndex(model_name="ejecucionmatriz", index=...),
        migrations.AddIndex(model_name="plan", index=...),
        migrations.AddIndex(model_name="plan", index=...),
        migrations.AddIndex(model_name="requisitoporempresadetalle", index=...),
        # --- Fin AddIndex ---

        # --- IMPORTANTE: AÑADIR LOS AlterField para cambiar el TIPO de campo en el ESTADO de Django ---
        # Aunque el SQL se ejecuta condicionalmente, Django necesita saber que el tipo de campo
        # en su estado interno (models.py) ha cambiado a PositiveIntegerField.
        # Añadimos los AlterField originales aquí, pero SIN la cláusula USING problemática.
        migrations.AlterField(
            model_name="requisitolegal",
            name="tiempo_validacion",
            field=models.PositiveIntegerField(
                blank=True,
                help_text="Número de días hábiles (según país) estimados o requeridos para validar.",
                null=True,
                validators=[django.core.validators.MinValueValidator(0)],
                verbose_name="Tiempo de Validación (Días Hábiles)",
            ),
        ),
        migrations.AlterField(
            model_name="requisitoporempresadetalle",
            name="tiempo_validacion",
            field=models.PositiveIntegerField(
                blank=True,
                help_text="Número de días hábiles (según país del requisito) para validar. Usado para calcular Fecha Final.",
                null=True,
                validators=[django.core.validators.MinValueValidator(0)],
                verbose_name="Tiempo de Validación (Días Hábiles)",
            ),
        ),
        # --- FIN AlterField para estado Django ---
    ]
